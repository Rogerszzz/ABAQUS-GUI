# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(20.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseSolidExtrude(depth=20.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#42108421 #10842108 #84210842 #21084210 #8421084 #42108421 #10842108', 
    ' #84210842 #21084210 #8421084 #42108421 #10842108 #84210842 #21084210', 
    ' #8421084 #8421 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#1f #7c0000 #0 #1f0 #7c00000 #0 #1f00', 
    ' #7c000000 #0 #1f000 #c0000000 #7 #1f0000 #0', ' #7c ]', ), ), name=
    'Set-2')
# Save by jly4553 on Thu Aug 28 14:44:39 2014
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-1'].sets.changeKey(fromName='Set-1', toName=
    'ele_set')
del mdb.models['Model-1'].parts['Part-1'].sets['Set-2']
# Save by jly4553 on Thu Aug 28 14:45:50 2014
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-1'].Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ))
# Save by jly4553 on Thu Aug 28 15:52:07 2014
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements, name='element_all')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#3ff ]', ), ), name='ele_set1')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements, name='element_all')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#3ff ]', ), ), name='ele_set1')
mdb.models['Model-1'].parts['Part-1'].Set(name='node_all', nodes=
    mdb.models['Model-1'].parts['Part-1'].nodes)
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-5')
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells[0], name='Set-cell')
#* TypeError: keyword error on cells
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells, name='Set-cell')
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Part-1'].edges[4], point=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[4], MIDDLE))
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells[0], name='Set-cell')
#* TypeError: keyword error on cells
mdb.models['Model-1'].parts['Part-1'].Set(faces=
    mdb.models['Model-1'].parts['Part-1'].faces[0], name='Set-face')
#* TypeError: keyword error on faces
mdb.models['Model-1'].parts['Part-1'].Set(faces=
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), name='Set-face')
mdb.models['Model-1'].parts['Part-1'].renumberElement(increment=1, startLabel=
    100)
#* Error: Renumbering can be applied to orphan mesh parts only.
mdb.models['Model-1'].parts['Part-1'].deleteSets(setNames=('Set-5', 'Set-cell', 
    'Set-face'))
mdb.models['Model-1'].parts['Part-1'].deleteSets(setNames=('ele_set1', 
    'element_all', 'node_all'))
del mdb.models['Model-1'].parts['Part-1'].surfaces['Surf-1']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=20.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].parts['Part-2']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0, 
    transform=(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff:15 #fffff ]', ), ), name='all_plate_elems')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff:15 #fffff ]', ), ), name='all_plate_elems')
mdb.models['Model-1'].parts['Part-1'].Surface(face2Elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff:15 #fffff ]', ), ), face3Elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff:15 #fffff ]', ), ), name='plate_interior_surf')
mdb.models['Model-1'].parts['Part-1'].renumberElement(increment=1, startLabel=
    100)
#* Error: Renumbering can be applied to orphan mesh parts only.
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(10.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].parts['Part-2']
del mdb.models['Model-1'].parts['Part-1'].sets['all_plate_elems']
del mdb.models['Model-1'].parts['Part-1'].surfaces['plate_interior_surf']
# Save by jly4553 on Fri Aug 29 09:45:19 2014
